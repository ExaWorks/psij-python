#
# An identifier for this site which will appear in the aggregated results which
# are public. The options are as follows:
#
# hostname:
#     The host name of the machine on which the tests are invoked. This is
#     useful in identifying the machine such that the community is aware of the
#     status of PSI/J on it.
#
# random:
#     A random string that is persisted on disk (in ~/.psij).
#
# "<string>":
#     A user-specified string. Must be surrounded by double quotes.
#
# id = hostname | random | "<string>"

id = hostname


#
# An email used to contact the test runner in the event that troubleshooting
# from logs is unfeasable. This can be left empty if you do not wish to be
# contacted with troubleshooting tasks. This email is not publicly visible
# on the aggregation site.
#
# maintainer_email = <string>

maintainer_email =


#
# The scope selects which branches get tested. This selection can potentially
# impact security. The options are:
#
# stable:
#     Only test stable branches (currently the main branch). The stable
#     branches are branches in the core repository which are considered stable
#     and have been extensively reviewed and tested on other machines. They
#     carry the lowest risks.
#
# core:
#     Test all core branches. This tests all stable branches, as above, and
#     all branches that are in the core namespace and are part of pull
#     requests. Since only core developers can create branches in the core
#     namespace, this limits the tested code to code written by core
#     developers.
# tagged:
#     Test all core branches and all branches that are part of pull requests
#     that have been explicitly tagged by core developers for testing. The
#     branches can exist in private namespaces, so, technically, anybody can
#     submit such pull requests. However, a core developer needs to explicitly
#     approve testing on such pull requests. This option carries the most
#     risks.
#
# scope = stable | core | tagged

scope = core


#
# Enables minimal uploads mode. In minimal mode, no information that is 
# potentially sensitive is uploaded to the test results server. Specifically, 
# only the following are uploaded:
#   - code related identifiers, such as branch names, class names, etc.
#   - times and dates
#   - test related identifiers, such as run id
#   - the maintainer email, if one is provided
#   - boolean values, such as whether the target system has mpirun available,
#     etc.
#   - git identifiers and counts: branch name, last commit hash, how many 
#     commits the local code has ahead/behind of the remote, and if there
#     are any local changes
#   - the result status of tests, excluding string error messages coming from
#     tests
#
# Excluded items include, but are not limited to:
#   - stdout/stderr from tests
#   - logs from tests
#   - filesystem paths
#
# The full information is still saved locally and can be accessed and manually
# vetted if required. Setting this to "true" automatically enables saving of
# results to files. Please note that this option modifies the behavior of 
# uploads, which must still be requested using the "--upload-results" flag.
#
# minimal_uploads = false | true

minimal_uploads = false


#
# Which executors to test. This is a comma separated list of
# <executor_name>[:<launcher_name>[:<url>]] items. The "auto_q" executor means
# that the testing infrastructure will attempt to determine which queuing system
# is present on the test machine and use the corresponding executor for testing.
# Similar to "auto_q", "auto_l" means that the testing infrastructure will
# determine an appropriate launcher for the system. The launcher name can be
# empty if a particular executor does not use launchers but uses URLs
# (e.g., saga::localhost). The special value "auto" (without quotes) means that
# the executors to be tested should be determined automatically based on a
# survey of the runtime environment.
#
# executors = local:single, local:multiple, \
#            batch-test:single, batch-test:multiple, \
#            auto_q:single, auto_q:multiple, auto_q:auto_l

executors = auto


#
# If a site needs specific job attributes to be specified, such as billing
# accounts, they can be added here. The value is a comma separated list
# of "executor.name": "value" pairs.
#
# custom_attributes = "slurm.account": "xyz", \
#                     "slurm.constraint": "knl"

custom_attributes =


################################################################################
#                                                                              #
#        The settings below are advanced and unlikely to need updating         #
#                                                                              #
################################################################################

#
# The location of the server that receives and aggregates test results.
#
# server_url = <url>

server_url = https://psij.testing.exaworks.org


#
# A key authenticates a test ID such that it reduces the odds that two machines
# compete to overwrite each other's results. The machines are identified by their
# IDs. However, without additional steps, any other test deployment can set its
# ID to an existing one. The "key" setting allows a secret to be used to
# authenticate requests. There are two valid values:
#
# random:
#     Generates a random key on the first upload attempt. The server will then
#     only accept subsequent requests from the same ID if the key matches. There
#     is a 7 day expiration of a pairing which allows for a new key to be used
#     if an old key has not been used for 7 or more days. Random keys are
#     persisted locally in ~/.psij
#
# "<string>":
#     A custom string to be used as a key.
#
# key = random | "<string>"

key = random


#
# The maximum age, in hours, for saved test results to be kept on disk. When
# tests are run with the "--save-results", test results are saved on disk.
# They can be later uploaded to the aggregation server using
# "make upload-results". In order to prevent a very large number of test
# results from occupying disk space indefinitely, the various tools involved
# purge old results from disk. This parameter sets a limit on the age of
# results that should be kept on disk.
#
# max_age = 48

max_age = 48


#
# The repository where the code is located. This is needed to clone the code
# and to retrieve the list of PRs and their comments.
#

repository = ExaWorks/psij-python
