#!/bin/bash

MIN_PYTHON_VERSION="3.8"

set -o pipefail

if pip --version 2>&1 | egrep -q 'python 3\..*' >/dev/null 2>&1 ; then
    PIP="pip"
else
    PIP="pip3"
fi

if python --version 2>&1 | egrep -q 'Python 3\..*' >/dev/null 2>&1 ; then
    PYTHON="python"
else
    PYTHON="python3"
fi


existing_error_trailer() {
    echo "If you are certain that you want to install multiple entries,   "
    echo "you can re-run this script with the \"-f\" flag.                "
    echo "================================================================"

}

cron_check() {
    ps -eo command | awk '{print $1}' | grep cron >/dev/null 2>&1
    S1=$?
    crontab -l 2>&1 | grep "not allowed" >/dev/null 2>&1
    S2=$?
    echo "$(($S1 || ! $S2))"
}

crontab_list() {
    # wraps crontab -l such that an empty string is returned for a missing
    # crontab rather than an error
    if crontab -l 2>&1 | grep "no crontab for" >/dev/null 2>&1 ; then
        echo ""
    else
        crontab -l
    fi
}


cron_check_existing() {
    crontab_list | grep "psij-ci-run" >/dev/null 2>&1
}

cron_existing_error() {
    EXISTING=`crontab_list | grep "psij-ci-run"`
    echo
    echo "================================================================"
    echo "Error: a crontab for PSI/J tests already exists:                "
    echo ">>> $EXISTING"
    echo
    echo "You can edit your crontab with \"crontab -e\" and remove the    "
    echo "existing entry, then re-run this tool.                          "
    existing_error_trailer
    exit 2
}

cron_install() {
    CMD="$CMD --log"
    LINE="$MINUTE $HOUR * * * cd \"$MYPATH\" && $CMD"
    echo
    echo "================================================================"
    echo "The following line will be installed in your crontab:"
    echo "$LINE"
    echo "================================================================"

    CRT_CRONTAB=`crontab -l 2>&1`
    if [ "$?" != "0" ]; then
        if echo "$CRT_CRONTAB" | grep "no crontab for" >/dev/null 2>&1 ; then
            CRT_CRONTAB=""
        else
            echo "Error updating crontab: $CRT_CRONTAB"
            exit 2
        fi
    fi
    { echo "$CRT_CRONTAB"; echo "$LINE"; } | crontab -
    
    declare -x | egrep -v "^declare -x (BASH_VERSINFO|DISPLAY|EUID|GROUPS|SHELLOPTS|TERM|UID|_)=" >psij-ci-env
}

at_check() {
    FLAG_FILE=`mktemp`
    echo "rm $FLAG_FILE" | at now >/dev/null 2>&1
    if [ -f "$FLAG_FILE" ]; then
        echo 0
        rm $FLAG_FILE
    else
        echo 1
    fi
}

at_check_existing() {
    for JOB in `atq`; do
        JOB_NO=`echo $JOB | awk '{print $1}'`
        if at -c $JOB_NO | grep psij-ci-run >/dev/null 2>&1; then
            EXISTING_AT_JOB_NUM=$JOB_NO
            EXISTING_AT_JOB="$JOB `at -c $JOB_NO | grep psij-ci-run`"
            return 0
        fi
    done
    return 1
}

at_existing_error() {
    echo
    echo "================================================================"
    echo "Error: an AT job for PSI/J tests already exists:                "
    echo ">>> $EXISTING_AT_JOB"
    echo
    echo "You can remove this job by running                              "
    echo "> atrm $EXISTING_AT_JOB_NUM"
    echo "then re-run this tool.                                          "
    existing_error_trailer
    exit 2
}

at_install() {
    CMD="$CMD --reschedule $HOUR:$MINUTE --log"
    echo
    echo "================================================================"
    echo "The following will be executed:"
    echo "> echo \"$CMD\" | at $HOUR:$MINUTE"
    echo "================================================================"
    
    echo "$CMD" | at $HOUR:$MINUTE >/dev/null 2>&1
}

screen_check() {
    which screen >/dev/null 2>&1
    echo $?
}

screen_check_existing() {
    EXISTING_SCREEN_JOB=`screen -list | grep psij-ci-run`
}

screen_existing_error() {
    echo
    echo "================================================================"
    echo "Error: a Screen job for PSI/J tests already exists:             "
    echo ">>> $EXISTING_SCREEN_JOB"
    echo
    echo "You can remove this job by running attaching to the screen      "
    echo "session and exiting it with CTRL+C and then re-run this tool.   "
    exitsing_error_trailer
    exit 2
}

screen_install() {
    CMD="$CMD --repeat --log"
    echo
    echo "================================================================"
    echo "WARNING: Screen sessions do not persist across reboots. Please  "
    echo "check regularly and re-run this script if necessary.            "
    echo "                                                                "
    echo "The following will be executed:"
    echo "> screen -d -m bash -c \"$CMD\""
    echo "================================================================"
    screen -d -m bash -c "$CMD"
}

manual_check() {
    echo 0
}

manual_check_existing() {
    false
}

manual_existing_error() {
    true
}

manual_install() {
    CMD="$CMD --repeat --log"
    echo
    echo "================================================================"
    echo "Please run the following command in the background:             "
    echo "> $CMD"
    echo "================================================================"
}

completed_msg() {
    echo
    echo "================================================================"
    echo "Setup complete. If you have not already done so, please take    "
    echo "some time to customize testing.conf.                            "
    echo "================================================================"
}

continue_or_exit() {
    RESPONSE=""

    while [ "$RESPONSE" != "C" ] && [ "$RESPONSE" != "X" ]; do

        echo -n "Would you like to (C)ontinue or E(x)it? "
        read -n1 RESPONSE
        echo
        RESPONSE=${RESPONSE^}

        if [ "$RESPONSE" == "X" ]; then
            echo "Operation canceled"
            exit 1
        fi
    done
}

check_email() {
    if ! cat testing.conf | egrep '^maintainer_email\s*=.*@.*$' >/dev/null 2>&1 ; then
        echo
        echo "================================================================"
        echo "Warning: there appears to be no maintainer email specified.     "
        echo "A maintainer email can help the PSI/J team contact you when     "
        echo "problems arise with the test suite. It is highly recommended    "
        echo "that you provide one.                                           "
        echo "If you would like to do that, please exit this script and add   "
        echo "your email to the relevant line in testing.conf.                "
        echo "================================================================"
        echo

        continue_or_exit
    fi
}

check_key() {
    if [ ! -f ~/.psij/key ]; then
        BASE_URL=`egrep '^[^#]*server_url.*' ./testing.conf |awk '{split($0, a, "="); print a[2]}'|xargs`
        AUTH_URL="${BASE_URL}/auth.html"

        echo
        echo "================================================================"
        echo "There is no upload key (~/.psij/key). An upload key is needed   "
        echo "to upload results to the results site. To obtain a key, please  "
        echo "go to ${AUTH_URL}/auth.html in a browser and follow "
        echo "the instructions on that page.                                  "
        echo "================================================================"
        echo

        RESPONSE=""
        DONE="0"

        while [ "$DONE" == "0" ]; do
            echo "1. (C)ontinue without a key                                 "
            echo "2. E(x)it?                                                  "
            echo "3. (E)nter a key here to be placed in ~/.psij/key           "
            if [ "$XDG_CURRENT_DESKTOP" != "" ]; then
                echo "4. (O)pen $AUTH_URL in a browser    "
            fi
            read -n1 RESPONSE
            echo
            RESPONSE=${RESPONSE^}

            if [ "$RESPONSE" == "C" ] || [ "$RESPONSE" == "1" ]; then
                DONE=1
            elif [ "$RESPONSE" == "X" ] || [ "$RESPONSE" == "2" ]; then
                echo "Operation canceled"
                exit 1
            elif [ "$RESPONSE" == "E" ] || [ "$RESPONSE" == "3" ]; then
                RESPONSE=""
                while [ "$RESPONSE" != "Y" ]; do
                    echo -n "Enter key: "
                    read KEY
                    echo "You entered '$KEY'."
                    echo "Is this correct (Y/N)?"
                    read -n1 RESPONSE
                    RESPONSE=${RESPONSE^}
                done
                mkdir -p ~/.psij
                echo "$KEY" > ~/.psij/key
                chmod 600 ~/.psij/key
                DONE=1
            elif [ "$RESPONSE" == "O" ] || [ "$RESPONSE" == "4" ]; then
                xdg-open "$AUTH_URL"
            fi
        done

    fi
}

check_python_version() {
    VERSION=`$PYTHON --version | awk '{print $2}'`
    FIRST=`echo -e "$VERSION\n$MIN_PYTHON_VERSION" | sort -V|head -n 1`
    if [ "$FIRST" == "$VERSION" ]; then
        echo "Error: PSI/J requires Python $MIN_PYTHON_VERSION or above. Your current version is $VERSION."
        exit 2
    fi
}

check_pip_version() {
    PYTHON_VERSION=`$PYTHON --version | awk '{print $2}' | cut -d '.' -f 1,2`
    PIP_PYTHON_VERSION=`$PIP --version | sed -nE 's/.*\(python\s(.*)\)/\1/p'`

    if [ "$PYTHON_VERSION" != "$PIP_PYTHON_VERSION" ]; then
        echo -e "\e[33mWarning: The installed $PIP comes from Python $PIP_PYTHON_VERSION while your"
        echo -e "Python interpreter has version $PYTHON_VERSION. This is likely to cause problems.\e[0m"
    fi
}

not_cached() {
    if [ ! -d .packages ]; then
        return 0
    fi
    if [ ! -f .packages/req_csum.txt ]; then
        return 0
    fi
    REQ_CSUM=`cat .packages/req_csum.txt`
    PYTHON=`which $PYTHON`
    CRT_CSUM=`echo $PYTHON | cat - requirements*.txt | md5sum`

    if [ "$REQ_CSUM" != "$CRT_CSUM" ]; then
        return 0
    else
        return 1
    fi
}

dots_for_lines() {
    while read LINE; do
        echo -n .
    done
}

install_deps() {
    if not_cached; then
        echo -n "Installing dependencies..."

        exec 3> >(dots_for_lines >> /dev/stdout)
        OUT=`$PIP install --target .packages --upgrade -r requirements-tests.txt --no-compile 2>&1 1>&3`

        if [ "$?" != "0" ]; then
            echo "FAILED"
            echo "$OUT"
            exit 2
        else
            echo "Done"
            CSUM=`echo $PYTHON | cat - requirements*.txt | md5sum`
            echo "$CSUM" >.packages/req_csum.txt
        fi
    fi

    export PYTHONPATH=`pwd`/.packages:$PYTHONPATH
}


FORCE=0
PLAIN=0

while [ "$1" != "" ]; do
    if [ "$1" == "-f" ]; then
        FORCE=1
    elif [ "$1" == "--plain" ]; then
        PLAIN=1
    else
        echo "Unknown option \"$1\""
        exit 1
    fi
    shift
done

check_python_version
check_pip_version

MYPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
cd "$MYPATH"

if [ "$PLAIN" != "1" ]; then
    install_deps

    echo "Running TUI installer. To run the normal installer, use \"psij-ci-setup --plain\""

    exec $PYTHON tests/run_installer.py
fi

echo
echo "================================================================"
echo "This script will install requirements for the PSI/J CI tests and"
echo "add a cron job to run the tests once a day at some random time. "
echo "                                                                "
echo "If you need to set up a special environment, such as loading an "
echo "environment module please do so and then re-run this script.    "
echo "================================================================"
echo


continue_or_exit

check_email

check_key

install_deps


HOUR=`echo $(($RANDOM % 24))`
MINUTE=`echo $(($RANDOM % 60))`
MYPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

CMD="./psij-ci-run"

METHODS=(cron at screen manual)
METHOD_NAMES=(Cron AT Screen manual)

echo
echo "================================================================"
echo "Please choose a method to run the tests:                        "

SEQ=1
FIRST_AVAILABLE=1
DEFAULT_SEQ=1
for METHOD in "${METHODS[@]}"; do
    AVAILABLE=`${METHOD}_check`
    AVTEXT=""
    RECTEXT=""
    
    if [ "$AVAILABLE" != "0" ]; then
        AVTEXT="(not detected)"
    else
        if [ "$FIRST_AVAILABLE" == "1" ]; then
            FIRST_AVAILABLE=0
            RECTEXT="(recommended)"
            DEFAULT_SEQ=$SEQ
        fi
    fi
    
    echo "$SEQ) ${METHOD_NAMES[$SEQ - 1]} $AVTEXT $RECTEXT"
    SEQ=$((SEQ + 1))
done
echo "================================================================"



while echo "1234X" | grep -v "$RESPONSE" >/dev/null 2>&1 ; do

    echo -n "Method 1-4 ($DEFAULT_SEQ) or E(x)it? "
    read -n1 RESPONSE
    RESPONSE=${RESPONSE^}
    if [ "$RESPONSE" == "" ]; then
        RESPONSE=$DEFAULT_SEQ
    fi
    
    if [ "$RESPONSE" == "X" ]; then
        echo "Operation canceled"
        exit 1
    fi
done


METHOD="${METHODS[$RESPONSE - 1]}"

if [ "$FORCE" != "1" ] && ${METHOD}_check_existing ; then
   ${METHOD}_existing_error
else
    ${METHOD}_install
fi
