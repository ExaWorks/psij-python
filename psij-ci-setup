#!/bin/bash

if pip --version 2>&1 | egrep -q 'python 3\..*' >/dev/null 2>&1 ; then
    PIP="pip"
else
    PIP="pip3"
fi

MODE="plain"

if [ "$VIRTUAL_ENV" != "" ]; then
    MODE="venv"
fi

if [ "$CONDA_SHLVL" != "" ] && [ "$CONDA_SHLVL" != "0" ]; then
    MODE="conda"
fi


FORCE=0

if [ "$1" == "-f" ]; then
    FORCE=1
    shift
fi

MYPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

echo
echo "================================================================"
echo "This script will install requirements for the PSI/J CI tests and"
echo "add a cron job to run the tests once a day at some random time. "
echo "                                                                "
echo "Warning: if you are using a virtual environment or Conda, this  "
echo "script will set up tests to run inside the current virtual      "
echo "environment or Conda environment. To avoid unwanted changes to  "
echo "an existing environment, please exit this script, create a new  "
echo "environment, then re-run this script.                           "
echo "================================================================"
echo

RESPONSE=""

while [ "$RESPONSE" != "C" ] && [ "$RESPONSE" != "X" ]; do

    echo -n "Would you like to (C)ontinue or E(x)it? "
    read -n1 RESPONSE
    echo
    RESPONSE=${RESPONSE^}
    
    if [ "$RESPONSE" == "X" ]; then
        echo "Operation canceled"
        exit 1
    fi
done

cd "$MYPATH"

echo -n "Installing dependencies..."

if [ "$MODE" != "plain" ]; then
    OUT=`$PIP install -r requirements-tests.txt 2>&1`
else
    OUT=`$PIP install --target .packages --upgrade -r requirements-tests.txt 2>&1`
fi

if [ "$?" != "0" ]; then
    echo "FAILED"
    echo $OUT
    exit 2
else
    echo "Done"
fi


HOUR=`echo $(($RANDOM % 24))`
MINUTE=`echo $(($RANDOM % 60))`
MYPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

CMD="./psij-ci-run"

if [ "$MODE" == "venv" ]; then
    CMD="$CMD --with-venv \"$VIRTUAL_ENV\""
fi
if [ "$MODE" == "conda" ]; then
    CMD="$CMD --with-conda \"$CONDA_DEFAULT_ENV\""
fi
CMD="$CMD >> $MYPATH/testing.log 2>&1"


if ps aux | grep -e '^root.*cron' >/dev/null 2>&1 ; then
    # looks like some cron daemon is running

    if crontab -l 2>/dev/null | grep "psij-ci-run" >/dev/null && [ "$FORCE" != "1" ]; then
        EXISTING=`crontab -l 2>/dev/null | grep "psij-ci-run"`
        echo
        echo "================================================================"
        echo "Error: a crontab for PSI/J tests already exists:                "
        echo ">>> $EXISTING"
        echo
        echo "You can edit your crontab with \"crontab -e\" and remove the    "
        echo "existing entry, then re-run this tool. If you are certain that  "
        echo "you want to install multiple entries, you can re-run this script"
        echo "with the \"-f\" flag.                                           "
        echo "================================================================"
        exit 2
    else
        CMD="$CMD >> $MYPATH/testing.log 2>&1"
        LINE="$MINUTE $HOUR * * * cd \"$MYPATH\" && $CMD"
    
        echo
        echo "================================================================"
        echo "The following line will be installed in your crontab:"
        echo "$LINE"
        { crontab -l & echo "$LINE"; } | crontab -
        echo "Setup complete. If you have not already done so, please take    "
        echo "some time to customize testing.conf.                            "
        echo "================================================================"
    fi
elif which screen >/dev/null 2>&1 ; then
    CMD="$CMD --repeat >> $MYPATH/testing.log 2>&1"
    echo
    echo "================================================================"
    echo "It looks like there is no cron daemon running. As an            "
    echo "alternative, this script can start a GNU Screen session that    "
    echo "runs the tests once a day, using the following command:         "
    echo ">>> $CMD"
    echo "================================================================"
    
    RESPONSE=""

    while [ "$RESPONSE" != "Y" ] && [ "$RESPONSE" != "X" ]; do

        echo -n "Would you like to start a (S)creen session or E(x)it? "
        read -n1 RESPONSE
        echo
        RESPONSE=${RESPONSE^}
    
        if [ "$RESPONSE" == "X" ]; then
            echo "Operation canceled"
            exit 1
        fi
    done

    screen -d -m $CMD
else
    CMD="$CMD --repeat >> $MYPATH/testing.log 2>&1"
    echo
    echo "================================================================"
    echo "It looks like there is no cron daemon running. Please run the   "
    echo "following command in the background:                            "
    echo ">>> $CMD"
    echo "================================================================"
fi
