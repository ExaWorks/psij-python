#!/bin/bash

usage() {
    cat <<EOF
Usage: ./psij-ci-run [--help] [--repeat] [--reschedule HH:MM] [--log]
    --help
        Displays this message.
    --repeat
        If specified, run tests every 24 hours in a loop.
    --reschedule HH:MM
        If specified, reschedule the tests at HH:MM using the
        at command.
    --log
        Disables output and redirects to a log instead. Used
        when running the tests automatically.
    --tee
        Logs output as if --log was specified, but also prints
        on stdout.
EOF
}

failifempty() {
    if [ "$2" == "" ]; then
        echo "Missing parameter for $1"
        usage
        exit 1
    fi
}

MYPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
cd "$MYPATH"

if [ -f psij-ci-env ]; then
    source psij-ci-env
fi

REPEAT=0
RESCHEDULE=0
NO_OUT=0
TEE=0

while [ "$1" != "" ]; do
    case "$1" in
        --help)
            usage
            exit 0
            ;;
        --repeat)
            REPEAT=1
            shift
            ;;
        --reschedule)
            RESCHEDULE=1
            TIME="$2"
            shift 2
            ;;
        --log)
            NO_OUT=1
            shift
            ;;
        --tee)
            TEE=1
            shift
            ;;
        *)
            echo "Unrecognized command line option: $1."
            usage
            exit 1
            ;;
    esac
done

tee() {
    while read LINE; do
        echo "$LINE" >&3
        echo "$LINE" >>./testing.log
    done
}

if [ "$NO_OUT" == "1" ]; then
    exec 1<&-
    exec 2<&-

    exec 1>>./testing.log
    exec 2>&1
elif [ "$TEE" == "1" ]; then
    exec 3>&1-
    exec 2<&-

    exec 1> >(tee)
    exec 2>&1
fi

if python --version 2>&1 | egrep -q 'Python 3\..*' >/dev/null 2>&1 ; then
    PYTHON="python"
else
    PYTHON="python3"
fi

# Ensure latest test runner is there
git fetch https://github.com/ExaWorks/psij-python.git
git checkout FETCH_HEAD -- tests/ci_runner.py


if [ "$REPEAT" == "1" ]; then
    CRT_TIME=`date +%s`
    while true ; do
        echo "`date` Running tests..."
        $PYTHON tests/ci_runner.py $MODE
        echo "`date` Waiting (CTRL+C to interrupt)..."
        CRT_TIME=$((CRT_TIME + 86400))
        NOW=`date +%s`
        TO_SLEEP=$((CRT_TIME - NOW))
        sleep $TO_SLEEP
    done
elif [ "$RESCHEDULE" == "1" ]; then
    CMD="./psij-ci-run --reschedule $TIME --log"
    echo "$CMD" | at $TIME
    $PYTHON tests/ci_runner.py $MODE
else
    $PYTHON tests/ci_runner.py $MODE
fi
